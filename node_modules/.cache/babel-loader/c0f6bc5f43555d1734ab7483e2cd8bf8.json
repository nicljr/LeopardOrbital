{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\digim\\\\Documents\\\\GitHub\\\\LeopardOrbital\\\\src\\\\components\\\\Header\\\\Header.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// import { useEffect, useState } from \"react\";\n// import Box from \"../Box\";\n// function Header(props) {\n//   const { tasks } = props;\n//   return (\n//     <header>\n//       <h1>Orbitodolist</h1>\n//       <div style={{ display: \"flex\", flexFlow: \"row nowrap\" }}>\n//         <OverviewBox tasks={tasks} />\n//         <CatFactBox />\n//       </div>\n//     </header>\n//   );\n// }\n// function OverviewBox(props) {\n//   // This is passed all the way down from App\n//   const { tasks } = props;\n//   const [name, setName] = useState(\"Loading name...\");\n//   // We do not need to use useState here, because we do not need to keep\n//   // a state of the task list length. This is purely a simple calculation\n//   // done on the passed prop.\n//   const taskListLength = tasks.filter((task) => !task.isComplete).length;\n//   // This effect runs on component mount, so that it will fetch data from\n//   // localStorage when it is loaded.\n//   useEffect(() => {\n//     const savedName = window.localStorage.getItem(\"name\");\n//     // The ?? operator is called the nullish-coalescing operator\n//     // It sets the LHS of the operator, i.e. savedName, if LHS is not null\n//     // It sets the RHS of the operator, i.e. \"John Doe\", if LHS is null\n//     setName(savedName ?? \"John Doe\");\n//   }, []);\n//   return (\n//     <Box>\n//       <h2>Overview</h2>\n//       <p>\n//         Welcome back,{\" \"}\n//         <strong\n//           role=\"button\"\n//           onClick={() => {\n//             const newName = prompt(\"What is your name?\", name);\n//             setName(newName);\n//             window.localStorage.setItem(\"name\", newName);\n//           }}\n//         >\n//           {name || \"<set a name>\"}\n//         </strong>\n//         !\n//       </p>\n//       <p>\n//         You have{\" \"}\n//         <strong>\n//           {taskListLength} task{taskListLength === 1 ? \"\" : \"s\"}\n//         </strong>{\" \"}\n//         that {taskListLength === 1 ? \"is\" : \"are\"} not complete.\n//       </p>\n//     </Box>\n//   );\n// }\n// function CatFactBox() {\n//   const [catFact, setCatFact] = useState(\"Loading cat fact...\");\n//   // useEffect first argument: the effect that you want to run\n//   // useEffect second argument: the dependency array, i.e. the\n//   // values it is watching for any changes\n//   // In this case, the dependency array is empty (i.e. it is watching nothing)\n//   // so this effect will only run when the page has mounted (finished loading)\n//   useEffect(() => {\n//     fetch(\"https://catfact.ninja/fact\")\n//       .then((response) => response.json())\n//       .then((data) => setCatFact(data.fact))\n//       .catch((error) =>\n//         setCatFact(`Unable to retrieve cat fact. Error: ${error}`)\n//       );\n//   }, []);\n//   return (\n//     <Box>\n//       <h2>Cat Fact of the Day</h2>\n//       <p>{catFact}</p>\n//     </Box>\n//   );\n// }\n// export default Header;\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Header(props) {\n  const {\n    tasks\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Orbitodolist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexFlow: \"row nowrap\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(OverviewBox, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CatFactBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Header;\n\nfunction OverviewBox(props) {\n  _s();\n\n  // This is passed all the way down from App\n  const {\n    tasks\n  } = props;\n  const [name, setName] = useState(\"John Doe\"); // We do not need to use useState here, because we do not need to keep\n  // a state of the task list length. This is purely a simple calculation\n  // done on the passed prop.\n\n  const taskListLength = tasks.filter(task => !task.isComplete).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"HeaderBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Welcome back,\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        role: \"button\",\n        onClick: () => {\n          const newName = prompt(\"What is your name?\", name);\n          setName(newName);\n        },\n        children: name || \"<set a name>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You have\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [taskListLength, \" task\", taskListLength === 1 ? \"\" : \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), \" \", \"that \", taskListLength === 1 ? \"is\" : \"are\", \" not complete.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OverviewBox, \"ZgwUyBAPv5nGFWkZLznyceZV4XM=\");\n\n_c2 = OverviewBox;\n\nfunction CatFactBox() {\n  _s2();\n\n  const [catFact, setCatFact] = useState(\"Loading cat fact...\"); // useEffect first argument: the effect that you want to run\n  // useEffect second argument: the dependency array, i.e. the\n  // values it is watching for any changes\n  // In this case, the dependency array is empty (i.e. it is watching nothing)\n  // so this effect will only run when the page has mounted (finished loading)\n\n  useEffect(() => {\n    fetch(\"https://catfact.ninja/fact\").then(response => response.json()).then(data => setCatFact(data.fact)).catch(error => setCatFact(`Unable to retrieve cat fact. Error: ${error}`));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"HeaderBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cat Fact of the Day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: catFact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(CatFactBox, \"JyHDw/aiLCrxhhAaqQtANK5Hx4w=\");\n\n_c3 = CatFactBox;\nexport default Header;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"OverviewBox\");\n$RefreshReg$(_c3, \"CatFactBox\");","map":{"version":3,"names":["useEffect","useState","Header","props","tasks","display","flexFlow","OverviewBox","name","setName","taskListLength","filter","task","isComplete","length","newName","prompt","CatFactBox","catFact","setCatFact","fetch","then","response","json","data","fact","catch","error"],"sources":["C:/Users/digim/Documents/GitHub/LeopardOrbital/src/components/Header/Header.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import Box from \"../Box\";\r\n\r\n// function Header(props) {\r\n//   const { tasks } = props;\r\n//   return (\r\n//     <header>\r\n//       <h1>Orbitodolist</h1>\r\n//       <div style={{ display: \"flex\", flexFlow: \"row nowrap\" }}>\r\n//         <OverviewBox tasks={tasks} />\r\n//         <CatFactBox />\r\n//       </div>\r\n//     </header>\r\n//   );\r\n// }\r\n\r\n// function OverviewBox(props) {\r\n//   // This is passed all the way down from App\r\n//   const { tasks } = props;\r\n\r\n//   const [name, setName] = useState(\"Loading name...\");\r\n\r\n//   // We do not need to use useState here, because we do not need to keep\r\n//   // a state of the task list length. This is purely a simple calculation\r\n//   // done on the passed prop.\r\n//   const taskListLength = tasks.filter((task) => !task.isComplete).length;\r\n\r\n//   // This effect runs on component mount, so that it will fetch data from\r\n//   // localStorage when it is loaded.\r\n//   useEffect(() => {\r\n//     const savedName = window.localStorage.getItem(\"name\");\r\n//     // The ?? operator is called the nullish-coalescing operator\r\n//     // It sets the LHS of the operator, i.e. savedName, if LHS is not null\r\n//     // It sets the RHS of the operator, i.e. \"John Doe\", if LHS is null\r\n//     setName(savedName ?? \"John Doe\");\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Box>\r\n//       <h2>Overview</h2>\r\n//       <p>\r\n//         Welcome back,{\" \"}\r\n//         <strong\r\n//           role=\"button\"\r\n//           onClick={() => {\r\n//             const newName = prompt(\"What is your name?\", name);\r\n//             setName(newName);\r\n//             window.localStorage.setItem(\"name\", newName);\r\n//           }}\r\n//         >\r\n//           {name || \"<set a name>\"}\r\n//         </strong>\r\n//         !\r\n//       </p>\r\n//       <p>\r\n//         You have{\" \"}\r\n//         <strong>\r\n//           {taskListLength} task{taskListLength === 1 ? \"\" : \"s\"}\r\n//         </strong>{\" \"}\r\n//         that {taskListLength === 1 ? \"is\" : \"are\"} not complete.\r\n//       </p>\r\n//     </Box>\r\n//   );\r\n// }\r\n\r\n// function CatFactBox() {\r\n//   const [catFact, setCatFact] = useState(\"Loading cat fact...\");\r\n\r\n//   // useEffect first argument: the effect that you want to run\r\n//   // useEffect second argument: the dependency array, i.e. the\r\n//   // values it is watching for any changes\r\n\r\n//   // In this case, the dependency array is empty (i.e. it is watching nothing)\r\n//   // so this effect will only run when the page has mounted (finished loading)\r\n//   useEffect(() => {\r\n//     fetch(\"https://catfact.ninja/fact\")\r\n//       .then((response) => response.json())\r\n//       .then((data) => setCatFact(data.fact))\r\n//       .catch((error) =>\r\n//         setCatFact(`Unable to retrieve cat fact. Error: ${error}`)\r\n//       );\r\n//   }, []);\r\n\r\n//   return (\r\n//     <Box>\r\n//       <h2>Cat Fact of the Day</h2>\r\n//       <p>{catFact}</p>\r\n//     </Box>\r\n//   );\r\n// }\r\n\r\n// export default Header;\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Header(props) {\r\n  const { tasks } = props;\r\n  return (\r\n    <header>\r\n      <h1>Orbitodolist</h1>\r\n      <div style={{ display: \"flex\", flexFlow: \"row nowrap\" }}>\r\n        <OverviewBox tasks={tasks} />\r\n        <CatFactBox />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nfunction OverviewBox(props) {\r\n  // This is passed all the way down from App\r\n  const { tasks } = props;\r\n\r\n  const [name, setName] = useState(\"John Doe\");\r\n\r\n  // We do not need to use useState here, because we do not need to keep\r\n  // a state of the task list length. This is purely a simple calculation\r\n  // done on the passed prop.\r\n  const taskListLength = tasks.filter((task) => !task.isComplete).length;\r\n\r\n  return (\r\n    <div className=\"HeaderBox\">\r\n      <h2>Overview</h2>\r\n      <p>\r\n        Welcome back,{\" \"}\r\n        <strong\r\n          role=\"button\"\r\n          onClick={() => {\r\n            const newName = prompt(\"What is your name?\", name);\r\n            setName(newName);\r\n          }}\r\n        >\r\n          {name || \"<set a name>\"}\r\n        </strong>\r\n        !\r\n      </p>\r\n      <p>\r\n        You have{\" \"}\r\n        <strong>\r\n          {taskListLength} task{taskListLength === 1 ? \"\" : \"s\"}\r\n        </strong>{\" \"}\r\n        that {taskListLength === 1 ? \"is\" : \"are\"} not complete.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CatFactBox() {\r\n  const [catFact, setCatFact] = useState(\"Loading cat fact...\");\r\n\r\n  // useEffect first argument: the effect that you want to run\r\n  // useEffect second argument: the dependency array, i.e. the\r\n  // values it is watching for any changes\r\n\r\n  // In this case, the dependency array is empty (i.e. it is watching nothing)\r\n  // so this effect will only run when the page has mounted (finished loading)\r\n  useEffect(() => {\r\n    fetch(\"https://catfact.ninja/fact\")\r\n      .then((response) => response.json())\r\n      .then((data) => setCatFact(data.fact))\r\n      .catch((error) =>\r\n        setCatFact(`Unable to retrieve cat fact. Error: ${error}`)\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"HeaderBox\">\r\n      <h2>Cat Fact of the Day</h2>\r\n      <p>{catFact}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}