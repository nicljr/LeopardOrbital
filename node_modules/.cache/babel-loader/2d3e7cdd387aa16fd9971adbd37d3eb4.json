{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\digim\\\\Documents\\\\GitHub\\\\LeopardOrbital\\\\src\\\\components\\\\TaskManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskManager(props) {\n  _s();\n\n  // Our tasks and setTasks is now passed down from App\n  const {\n    tasks,\n    setTasks\n  } = props;\n  const [newTaskText, setNewTaskText] = useState(\"\");\n\n  function handleAddTask(event) {\n    // React honours default browser behavior and the\n    // default behaviour for a form submission is to\n    // submit AND refresh the page. So we override the\n    // default behaviour here as we don't want to refresh\n    event.preventDefault();\n    addTask(newTaskText);\n  }\n\n  function addTask(description) {\n    const newTasks = [// the ... operator is called the spread operator\n    // what we are doing is creating a brand new array of\n    // tasks, that is different from the previous array\n    // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n    ...tasks, {\n      description: description,\n      isComplete: false\n    }];\n    setTasks(newTasks);\n    console.log(newTasks);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddTask,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Task:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              margin: \"0 1rem\"\n            },\n            type: \"text\",\n            value: newTaskText // how do you know it's event.target.value? it just is.\n            // search it up on MDN, and view react code samples\n            // See: https://reactjs.org/docs/forms.html\n            ,\n            onChange: event => setNewTaskText(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks,\n        setTasks: setTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tasks yet! Add one above!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TaskManager, \"FYWzlFLoCyEaJ/17X+XtxYPRuZo=\");\n\n_c = TaskManager;\n\nfunction TaskList(props) {\n  const {\n    tasks,\n    setTasks\n  } = props;\n\n  function handleTaskCompletionToggled(toToggleTask, toToggleTaskIndex) {\n    const newTasks = [// Once again, this is the spread operator\n    ...tasks.slice(0, toToggleTaskIndex), {\n      description: toToggleTask.description,\n      isComplete: !toToggleTask.isComplete\n    }, ...tasks.slice(toToggleTaskIndex + 1)]; // We set new tasks in such a complex way so that we maintain immutability\n    // Read this article to find out more:\n    // https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\n\n    setTasks(newTasks);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    style: {\n      margin: \"0 auto\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"No.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tasks.map((task, index) =>\n      /*#__PURE__*/\n      // We should specify key here to help react identify\n      // what has updated\n      // https://reactjs.org/docs/lists-and-keys.html#keys\n      _jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: task.isComplete,\n            onChange: () => handleTaskCompletionToggled(task, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, task.description, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = TaskList;\nexport default TaskManager;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskManager\");\n$RefreshReg$(_c2, \"TaskList\");","map":{"version":3,"names":["React","useState","TaskManager","props","tasks","setTasks","newTaskText","setNewTaskText","handleAddTask","event","preventDefault","addTask","description","newTasks","isComplete","console","log","margin","target","value","length","TaskList","handleTaskCompletionToggled","toToggleTask","toToggleTaskIndex","slice","width","map","task","index"],"sources":["C:/Users/digim/Documents/GitHub/LeopardOrbital/src/components/TaskManager.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction TaskManager(props) {\r\n  // Our tasks and setTasks is now passed down from App\r\n  const { tasks, setTasks } = props;\r\n\r\n  const [newTaskText, setNewTaskText] = useState(\"\");\r\n\r\n  function handleAddTask(event) {\r\n    // React honours default browser behavior and the\r\n    // default behaviour for a form submission is to\r\n    // submit AND refresh the page. So we override the\r\n    // default behaviour here as we don't want to refresh\r\n    event.preventDefault();\r\n    addTask(newTaskText);\r\n  }\r\n\r\n  function addTask(description) {\r\n    const newTasks = [\r\n      // the ... operator is called the spread operator\r\n      // what we are doing is creating a brand new array of\r\n      // tasks, that is different from the previous array\r\n      // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\r\n      ...tasks,\r\n      {\r\n        description: description,\r\n        isComplete: false\r\n      }\r\n    ];\r\n    setTasks(newTasks);\r\n    console.log(newTasks);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h2>Add Tasks</h2>\r\n        <form onSubmit={handleAddTask}>\r\n          <label>\r\n            Task:\r\n            <input\r\n              style={{ margin: \"0 1rem\" }}\r\n              type=\"text\"\r\n              value={newTaskText}\r\n              // how do you know it's event.target.value? it just is.\r\n              // search it up on MDN, and view react code samples\r\n              // See: https://reactjs.org/docs/forms.html\r\n              onChange={(event) => setNewTaskText(event.target.value)}\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Add\" />\r\n        </form>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Task List</h2>\r\n        {tasks.length > 0 ? (\r\n          <TaskList tasks={tasks} setTasks={setTasks} />\r\n        ) : (\r\n          <p>No tasks yet! Add one above!</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TaskList(props) {\r\n  const { tasks, setTasks } = props;\r\n\r\n  function handleTaskCompletionToggled(toToggleTask, toToggleTaskIndex) {\r\n    const newTasks = [\r\n      // Once again, this is the spread operator\r\n      ...tasks.slice(0, toToggleTaskIndex),\r\n      {\r\n        description: toToggleTask.description,\r\n        isComplete: !toToggleTask.isComplete\r\n      },\r\n      ...tasks.slice(toToggleTaskIndex + 1)\r\n    ];\r\n    // We set new tasks in such a complex way so that we maintain immutability\r\n    // Read this article to find out more:\r\n    // https://blog.logrocket.com/immutability-in-react-ebe55253a1cc/\r\n\r\n    setTasks(newTasks);\r\n  }\r\n\r\n  return (\r\n    <table style={{ margin: \"0 auto\", width: \"100%\" }}>\r\n      <thead>\r\n        <tr>\r\n          <th>No.</th>\r\n          <th>Task</th>\r\n          <th>Completed</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {tasks.map((task, index) => (\r\n          // We should specify key here to help react identify\r\n          // what has updated\r\n          // https://reactjs.org/docs/lists-and-keys.html#keys\r\n          <tr key={task.description}>\r\n            <td>{index + 1}</td>\r\n            <td>{task.description}</td>\r\n            <td>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={task.isComplete}\r\n                onChange={() => handleTaskCompletionToggled(task, index)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\nexport default TaskManager;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAAA;;EAC1B;EACA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBF,KAA5B;EAEA,MAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;;EAEA,SAASO,aAAT,CAAuBC,KAAvB,EAA8B;IAC5B;IACA;IACA;IACA;IACAA,KAAK,CAACC,cAAN;IACAC,OAAO,CAACL,WAAD,CAAP;EACD;;EAED,SAASK,OAAT,CAAiBC,WAAjB,EAA8B;IAC5B,MAAMC,QAAQ,GAAG,CACf;IACA;IACA;IACA;IACA,GAAGT,KALY,EAMf;MACEQ,WAAW,EAAEA,WADf;MAEEE,UAAU,EAAE;IAFd,CANe,CAAjB;IAWAT,QAAQ,CAACQ,QAAD,CAAR;IACAE,OAAO,CAACC,GAAR,CAAYH,QAAZ;EACD;;EAED,oBACE;IAAA,wBACE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAM,QAAQ,EAAEL,aAAhB;QAAA,wBACE;UAAA,iCAEE;YACE,KAAK,EAAE;cAAES,MAAM,EAAE;YAAV,CADT;YAEE,IAAI,EAAC,MAFP;YAGE,KAAK,EAAEX,WAHT,CAIE;YACA;YACA;YANF;YAOE,QAAQ,EAAGG,KAAD,IAAWF,cAAc,CAACE,KAAK,CAACS,MAAN,CAAaC,KAAd;UAPrC;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAaE;UAAO,IAAI,EAAC,QAAZ;UAAqB,KAAK,EAAC;QAA3B;UAAA;UAAA;UAAA;QAAA,QAbF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAoBE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,EAEGf,KAAK,CAACgB,MAAN,GAAe,CAAf,gBACC,QAAC,QAAD;QAAU,KAAK,EAAEhB,KAAjB;QAAwB,QAAQ,EAAEC;MAAlC;QAAA;QAAA;QAAA;MAAA,QADD,gBAGC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ;IAAA;MAAA;MAAA;MAAA;IAAA,QApBF;EAAA,gBADF;AA+BD;;GA9DQH,W;;KAAAA,W;;AAgET,SAASmB,QAAT,CAAkBlB,KAAlB,EAAyB;EACvB,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBF,KAA5B;;EAEA,SAASmB,2BAAT,CAAqCC,YAArC,EAAmDC,iBAAnD,EAAsE;IACpE,MAAMX,QAAQ,GAAG,CACf;IACA,GAAGT,KAAK,CAACqB,KAAN,CAAY,CAAZ,EAAeD,iBAAf,CAFY,EAGf;MACEZ,WAAW,EAAEW,YAAY,CAACX,WAD5B;MAEEE,UAAU,EAAE,CAACS,YAAY,CAACT;IAF5B,CAHe,EAOf,GAAGV,KAAK,CAACqB,KAAN,CAAYD,iBAAiB,GAAG,CAAhC,CAPY,CAAjB,CADoE,CAUpE;IACA;IACA;;IAEAnB,QAAQ,CAACQ,QAAD,CAAR;EACD;;EAED,oBACE;IAAO,KAAK,EAAE;MAAEI,MAAM,EAAE,QAAV;MAAoBS,KAAK,EAAE;IAA3B,CAAd;IAAA,wBACE;MAAA,uBACE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAQE;MAAA,UACGtB,KAAK,CAACuB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP;MAAA;MACT;MACA;MACA;MACA;QAAA,wBACE;UAAA,UAAKA,KAAK,GAAG;QAAb;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAKD,IAAI,CAAChB;QAAV;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAA,uBACE;YACE,IAAI,EAAC,UADP;YAEE,OAAO,EAAEgB,IAAI,CAACd,UAFhB;YAGE,QAAQ,EAAE,MAAMQ,2BAA2B,CAACM,IAAD,EAAOC,KAAP;UAH7C;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA,GAASD,IAAI,CAAChB,WAAd;QAAA;QAAA;QAAA;MAAA,QAJD;IADH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD;;MAjDQS,Q;AAkDT,eAAenB,WAAf"},"metadata":{},"sourceType":"module"}